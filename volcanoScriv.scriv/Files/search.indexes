<?xml version="1.0" encoding="UTF-8"?>
<SearchIndexes Version="1.0">
    <Documents>
        <Document ID="0146154A-8B5E-4C29-95B9-DCA8513890C2">
            <Title>노년도 할 수 있는 웹프로그래밍</Title>
        </Document>
        <Document ID="040EC6A5-4953-4055-8DEB-11AF51F7E5A6">
            <Title>참조 연결</Title>
            <Text>참조 페이지 연결

우클릭하여 나온 서브 메뉴에서 ‘Link to Document’ 선택

#</Text>
        </Document>
        <Document ID="04A18327-5CCC-44F4-AAD6-596208B8BCB9">
            <Title>스크리브너로 글쓰기</Title>
        </Document>
        <Document ID="1258A173-6FEB-4608-9FE3-D840F8654DAC">
            <Title>note</Title>
            <Text>편집 옵션에서 첫글자 대문자 사용과 ‘I’에 대한 옵션 해제
영문 상태의 글 작성에는 도움이 되지만은 한글 상태에서 영어를 가끔 사용하는 경우는 불편한 옵션입니다.

#

#</Text>
        </Document>
        <Document ID="1ABF0B8C-1B27-4170-917D-AD28C323139E">
            <Title>블로그 글 자료</Title>
        </Document>
        <Document ID="1CBE80F3-2196-46A8-B2AC-8FD657AA1ED3">
            <Title>나의 첫 익스프레스 서버 만들기</Title>
            <Text>나의 첫 익스프레스 서버 만들기

#

#

#

#

Node.js와 Express 서버는 서로 관련이 있지만 서로 다른 역할을 합니다.
Node.js:
Node.js는 JavaScript를 사용하여 서버 사이드 애플리케이션을 개발할 수 있는 런타임 환경입니다.
이는 Chrome V8 JavaScript 엔진을 기반으로 하여 구축되었습니다.
Node.js는 이벤트 기반, 논블로킹 I/O 모델을 사용하여 효율적이고 확장 가능한 네트워크 애플리케이션을 만드는 데 적합합니다.
Node.js 자체는 서버 기능을 제공하지만, 서버를 구축하기 위해 추가적인 작업을 수행해야 합니다. 예를 들어, HTTP 서버를 만들기 위해 Node.js의 http 모듈을 사용하여 라우팅, 요청 처리 등을 직접 구현해야 합니다.
Express:
Express는 Node.js 위에 구축된 프레임워크로, 웹 애플리케이션과 API를 빠르고 쉽게 구축할 수 있도록 설계되었습니다.
Express는 미들웨어 아키텍처를 사용하여 요청 및 응답 객체를 다루고, 라우팅, 템플릿 엔진 통합, 에러 핸들링 등과 같은 추가 기능을 제공합니다.
Express를 사용하면 개발자가 웹 서버를 보다 쉽고 간결하게 구축할 수 있으며, 많은 반복적인 작업을 줄일 수 있습니다.
간단히 말해서, Node.js는 웹 서버를 포함한 다양한 서버 사이드 애플리케이션을 만들 수 있는 기반이며, Express는 Node.js 위에 구축된 프레임워크로서 웹 애플리케이션과 API의 개발을 간편하게 만들어주는 추가적인 기능들을 제공합니다. Express 없이도 Node.js만으로 웹 서버를 구축할 수 있지만, Express를 사용하면 개발 과정이 훨씬 수월해집니다.

다음과 같은 에러는?
#

#</Text>
        </Document>
        <Document ID="1E50266B-8686-44D9-AE7B-EF89DA83BC01">
            <Title>2024년 시집</Title>
        </Document>
        <Document ID="263D5933-3E26-4AAB-BA97-98A6743A1B61">
            <Title>돈이 되는 블로그 만들기</Title>
        </Document>
        <Document ID="26BBE27E-00D5-4D27-9FCD-C8D9A2EDAB93">
            <Title>노년에 다시하는 수학 공부</Title>
        </Document>
        <Document ID="29EAD693-94FA-4D62-A6E2-E3DD6F17DEDE">
            <Title>프레지로 프레젠테이션</Title>
        </Document>
        <Document ID="30132500-6028-4194-BB8A-9830AB1DE469">
            <Title>Sigil로 만드는 전자책</Title>
        </Document>
        <Document ID="306B0A4E-D774-475D-9416-8006C64773FB">
            <Title>upaper.kr에 유통 위탁</Title>
            <Text>유페이퍼

#


#

수정하여 다시 판매

작가 관리
#</Text>
        </Document>
        <Document ID="39EA8DB4-9911-4DB3-8337-2BBDF945FC35">
            <Title>생활로 타는 건강 자전거</Title>
        </Document>
        <Document ID="5148D867-63B0-42F5-87FB-4C83E5210168">
            <Title>노년에 즐기는 대학생활</Title>
        </Document>
        <Document ID="5546CD5C-EF58-491A-9608-E2E1C0D93D82">
            <Title>전자책 만들기</Title>
            <Text>4월의 전자책: EPUB 2.0으로 만드는 전자책 만들기
최신 버전은 Sigil 2.1.0
#

#

PageEdit 동반 설치

시길 2.1 버전을 사용하되, epub 버전은 3.0이 아닌 2.0 버전으로 책 만들기(후속작으로 3.0 사용)</Text>
        </Document>
        <Document ID="57D11850-B5D9-416D-9E3E-5B064C38EC8E">
            <Title>뮤지컬 영화 '마이 페어 레이디</Title>
            <Text>뮤지컬 영화 '마이 페어 레이디'는 1964년에 제작된 클래식한 작품입니다. 이 영화는 조지 버나드 쇼의 희곡 '피그말리온'을 바탕으로 하여 제작되었으며, 감독은 조지 큐커가 맡았습니다. 주요 배역으로는 오드리 헵번이 엘리자 두리틀 역을, 렉스 해리슨이 헨리 히긴스 교수 역을 맡아 뛰어난 연기를 선보였습니다.

이 영화의 주된 줄거리는, 발음이 불분명하고 속된 말투를 쓰는 꽃파는 소녀 엘리자 두리틀이 언어학자 헨리 히긴스 교수의 도움을 받아 고상한 사회의 숙녀로 거듭나는 과정을 그리고 있습니다. 히긴스 교수는 엘리자가 짧은 시간 내에 고급 사회에서 통할 수 있는 말투와 행동을 익힐 수 있을지에 대한 내기를 하게 됩니다. 엘리자는 교육을 통해 자신감을 얻고 사회적 지위를 높이면서도 자신의 정체성과 가치에 대해 깊이 고민하게 됩니다.

'마이 페어 레이디'는 당시의 사회적 계층과 언어, 그리고 여성의 지위에 대한 통찰을 제공하며, 오드리 헵번과 렉스 해리슨의 연기가 돋보이는 작품입니다. 또한, &quot;I Could Have Danced All Night&quot;, &quot;The Rain in Spain&quot;, &quot;Wouldn't It Be Loverly&quot;와 같은 명곡들이 영화의 분위기를 한층 더 풍부하게 만들어 줍니다. 이 곡들은 후에 많은 사람들에게 사랑받으며 뮤지컬 영화의 고전으로 자리 잡았습니다.

영화는 또한 아름다운 의상과 무대 디자인으로도 유명합니다. 특히 엘리자가 참석하는 공식 행사에서 입는 화려한 드레스는 오드리 헵번의 우아한 매력을 더욱 돋보이게 합니다. 이러한 시각적 요소와 더불어, 영화는 계층 간의 갈등과 개인의 자아 실현이라는 보다 깊은 주제를 다루고 있어, 단순한 흥행작을 넘어서서 시대를 초월한 명작으로 평가받고 있습니다.

뮤지컬 영화 '마이 페어 레이디'는 아름다운 음악과 뛰어난 연기, 그리고 깊이 있는 스토리라인으로 많은 사람들에게 사랑받는 작품이며, 여러 세대를 아울러 감상할 수 있는 영화입니다. 이러한 요소들이 결합하여, 영화는 오늘날에도 여전히 많은 뮤지컬 애호가들에게 즐거움을 선사합니다.</Text>
        </Document>
        <Document ID="59C15D31-CFCD-415B-ACA6-28CD5FACF0EE">
            <Title>렉스 해리슨</Title>
            <Text>렉스 해리슨은 1908년 3월 5일에 영국 랭커셔에서 태어난 유명한 배우로, 본명은 레지널드 캐리 해리슨입니다. 그는 주로 무대와 스크린에서 활동하며 특유의 우아하고 지적인 매력으로 잘 알려져 있습니다. 렉스 해리슨은 특히 뮤지컬 '마이 페어 레이디'에서 헨리 히긴스 교수 역을 맡아 큰 사랑을 받았으며, 이 역할로 1964년에 아카데미 주연상을 수상했습니다.

그의 연기 생활은 1930년대 초반에 시작되었습니다. 초기에는 영국에서 다수의 영화에 출연하며 경력을 쌓아갔고, 1940년대에 들어서는 할리우드로 무대를 옮겨 더 큰 성공을 거두었습니다. 그의 대표작으로는 '블리스 스피릿' (1945), '더 고스트 앤 미세스 뮤어' (1947), 그리고 '클레오파트라' (1963) 등이 있습니다.

렉스 해리슨은 또한 브로드웨이 무대에서도 활발히 활동했습니다. 그의 브로드웨이 데뷔작은 1946년의 '스위트 머더'였으며, 이후 '마이 페어 레이디' 외에도 다양한 작품에서 뛰어난 연기력을 선보였습니다. 특히 그는 말끔한 영국 신사의 이미지를 통해 자신만의 독특한 캐릭터를 구축했으며, 이러한 이미지는 그가 연기한 많은 역할에 깊이를 더해주었습니다.

렉스 해리슨은 또한 개인 생활에서 여러 차례 결혼과 이혼을 경험하며 화제의 중심에 섰습니다. 그러나 그의 연기 경력과 전문성은 이러한 개인적인 삶의 소란을 뛰어넘는 것으로 평가받았습니다. 그는 1990년 6월 2일에 뉴욕에서 폐암으로 사망했으며, 그의 죽음은 연극과 영화계에 큰 손실로 여겨졌습니다.

렉스 해리슨의 예술적 유산은 그의 작품과 수상 경력에서 명확히 드러납니다. 그는 자신이 맡은 다양한 역할을 통해 섬세하고 지적인 연기로 관객에게 깊은 인상을 남겼으며, 그의 이름은 오늘날에도 연극과 영화의 고전적 명배우로 기억됩니다.</Text>
        </Document>
        <Document ID="59C552C4-68FE-4CAE-98F8-75594C2C7984">
            <Title>남이 아닌 나를 위한 책</Title>
            <Text>나를 위한 책

</Text>
        </Document>
        <Document ID="5B9B1C4F-CCE6-474A-83D8-FD1C4B7517DA">
            <Title>컨셉</Title>
        </Document>
        <Document ID="694AA089-1534-49BD-AC0F-E4552D728A19">
            <Title>ThinkWise로 컨셉 훈련을 하는 마인드맵</Title>
        </Document>
        <Document ID="6A25E9D4-1252-4780-A148-0543DB4C84DC">
            <Title>아래한글로 자서전 쓰기</Title>
        </Document>
        <Document ID="758D6658-C85A-48BE-95A5-030299A38238">
            <Title>note_Express서버와 Node.js차이</Title>
            <Text>Node.js와 Express 프레임워크 차이를 분명하게 구별하도록 진술

Node.js와 Express 서버는 서로 관련이 있지만 서로 다른 역할을 합니다.
Node.js:
Node.js는 JavaScript를 사용하여 서버 사이드 애플리케이션을 개발할 수 있는 런타임 환경입니다.
이는 Chrome V8 JavaScript 엔진을 기반으로 하여 구축되었습니다.
Node.js는 이벤트 기반, 논블로킹 I/O 모델을 사용하여 효율적이고 확장 가능한 네트워크 애플리케이션을 만드는 데 적합합니다.
Node.js 자체는 서버 기능을 제공하지만, 서버를 구축하기 위해 추가적인 작업을 수행해야 합니다. 예를 들어, HTTP 서버를 만들기 위해 Node.js의 http 모듈을 사용하여 라우팅, 요청 처리 등을 직접 구현해야 합니다.
Express:
Express는 Node.js 위에 구축된 프레임워크로, 웹 애플리케이션과 API를 빠르고 쉽게 구축할 수 있도록 설계되었습니다.
Express는 미들웨어 아키텍처를 사용하여 요청 및 응답 객체를 다루고, 라우팅, 템플릿 엔진 통합, 에러 핸들링 등과 같은 추가 기능을 제공합니다.
Express를 사용하면 개발자가 웹 서버를 보다 쉽고 간결하게 구축할 수 있으며, 많은 반복적인 작업을 줄일 수 있습니다.
간단히 말해서, Node.js는 웹 서버를 포함한 다양한 서버 사이드 애플리케이션을 만들 수 있는 기반이며, Express는 Node.js 위에 구축된 프레임워크로서 웹 애플리케이션과 API의 개발을 간편하게 만들어주는 추가적인 기능들을 제공합니다. Express 없이도 Node.js만으로 웹 서버를 구축할 수 있지만, Express를 사용하면 개발 과정이 훨씬 수월해집니다.</Text>
        </Document>
        <Document ID="7894DEAD-CE5B-49C9-82F7-F9F5307D0618">
            <Title>REST API 원칙</Title>
        </Document>
        <Document ID="7A0829A3-265D-49F6-87F7-B1EB1CDB6F46">
            <Title>컨셉</Title>
            <Text>#

#

#
아서 케일리

#
뉴스에 소개된 취합검사법</Text>
        </Document>
        <Document ID="80873F9C-2C69-42B0-9255-F6E225380303">
            <Title>익스프레스로 간단한 API 서버 만들기</Title>
            <Text>API(Application Programming Interface)
프로그램에서 다른 프로그램의 기능을 사용할 수 있도록 하는 일종의 규약

API는 REST API 원칙을 따라 제작
REST API원칙REST API 원칙
- 자원을 URL에 표현하고 자원을 가져오는 행위를 HTTP 메서드로 표현하는 규칙

간단 게시판 만들기

const express = require(&quot;express&quot;);
const app = express();
let posts = [];

// req.body를 사용하려면 JSON 미들웨어를 사용해야 함
// 사용하지 않으면 undefined로 반환
app.use(express.json()); // JSON 미들웨어 활성화

// POST 요청 시 콘텐트 타입이 application/x-www-form-urlencoded인 경우 파싱
app.use(express.urlencoded({extended: true})); // JSON 미들웨어와 함께 사용

app.get(&quot;/&quot;, (req, res) =&gt; {
    res.json(posts);
});

app.post(&quot;/posts&quot;, (req, tes) =&gt; {
    const {title, name, text} = req.body;

    // 게시슬 리스트에 새로운 게시글 정보 추가
    posts.push({id: posts.length + 1, title, name, text, createdDt: Date()});
    res.json({title, name, text});
});

app.delete(&quot;/posts/:id&quot;, (req, res) =&gt; {
    const id = req.params.id; // app.delete에 설정한 path 정보에서 id 값을 가져옴
    const filteredPosts = posts.filter((post) =&gt; post.id !== +id); // 글 삭제 로직
    const isLengthChanged = posts.length !== filteredPosts.length; // 삭제 확인
    posts = filteredPosts;
    if (isLengthChanged) { // posts의 데이터 개수가 변경되었으면 삭제 성공
        res.json(&quot;OK&quot;);
        return;
    }
    res.json(&quot;NOT CHANGED&quot;);
});

app.listen(3003, () =&gt; {
    console.log(&quot;Welcom posts START!&quot;);
});

#
익스프레스 간단한 API 서버 성공
</Text>
        </Document>
        <Document ID="84687E1C-FF85-4A55-8476-56F09C2D304A">
            <Title>Node.js와 Express 프레임워크 차이</Title>
            <Text>Node.js와 Express 프레임워크 차이

Node.js와 Express 서버는 서로 관련이 있지만 서로 다른 역할을 합니다.
Node.js:
Node.js는 JavaScript를 사용하여 서버 사이드 애플리케이션을 개발할 수 있는 런타임 환경입니다.
이는 Chrome V8 JavaScript 엔진을 기반으로 하여 구축되었습니다.
Node.js는 이벤트 기반, 논블로킹 I/O 모델을 사용하여 효율적이고 확장 가능한 네트워크 애플리케이션을 만드는 데 적합합니다.
Node.js 자체는 서버 기능을 제공하지만, 서버를 구축하기 위해 추가적인 작업을 수행해야 합니다. 예를 들어, HTTP 서버를 만들기 위해 Node.js의 http 모듈을 사용하여 라우팅, 요청 처리 등을 직접 구현해야 합니다.
Express:
Express는 Node.js 위에 구축된 프레임워크로, 웹 애플리케이션과 API를 빠르고 쉽게 구축할 수 있도록 설계되었습니다.
Express는 미들웨어 아키텍처를 사용하여 요청 및 응답 객체를 다루고, 라우팅, 템플릿 엔진 통합, 에러 핸들링 등과 같은 추가 기능을 제공합니다.
Express를 사용하면 개발자가 웹 서버를 보다 쉽고 간결하게 구축할 수 있으며, 많은 반복적인 작업을 줄일 수 있습니다.
간단히 말해서, Node.js는 웹 서버를 포함한 다양한 서버 사이드 애플리케이션을 만들 수 있는 기반이며, Express는 Node.js 위에 구축된 프레임워크로서 웹 애플리케이션과 API의 개발을 간편하게 만들어주는 추가적인 기능들을 제공합니다. Express 없이도 Node.js만으로 웹 서버를 구축할 수 있지만, Express를 사용하면 개발 과정이 훨씬 수월해집니다.</Text>
        </Document>
        <Document ID="85F80A88-5856-4227-BB01-7199116C4571">
            <Title>자전거의 구조</Title>
            <Text>자전거의 구조

자전거 타는 것은 과학이다.

자전거 프레임: 카본 프레임 만들기</Text>
        </Document>
        <Document ID="8AE61916-2182-43BF-943A-901304A448E6">
            <Title>스크리브너 활용법</Title>
            <Text>스크리브너 설치하기
새 프로젝트
프로젝트 백업
클라우드에서 공유하기
바인더에서 만들기


</Text>
        </Document>
        <Document ID="94383E1B-9874-4111-8A54-55100F11B99C">
            <Title>서울사이버대학교</Title>
        </Document>
        <Document ID="AB2538E2-DF89-4365-A4D7-18679B876D35">
            <Title>이명란강사시집</Title>
        </Document>
        <Document ID="B498E1C8-7B13-43FC-B045-947355306C65">
            <Title>노년도 할 수 있다</Title>
            <Text>노년도 할 수 있다
책 출간 프로젝트
#

2024년, '노년도 할 수 있다'는 노년을 위한 다양한 활동과 학습을 장려하는 전자책 시리즈를 선보입니다. 이 컨셉은 노년기에도 새로운 것을 배우고 도전하는 것이 가능함을 보여주며, 여러분의 삶에 활력을 불어넣을 것입니다. 다음은 출간 예정인 서적들의 소개입니다.

**Sigil로 만드는 전자책**: 전자책 제작의 A부터 Z까지, Sigil 프로그램을 활용하여 자신만의 책을 만드는 과정을 단계별로 안내합니다.  

**스크리브너로 글쓰기**: 글쓰기를 위한 강력한 도구인 스크리브너 사용법을 배우고, 노년에도 글쓰기의 즐거움을 발견할 수 있습니다.

**아래한글로 자서전 쓰기**: 한글과 컴퓨터를 사용하여 자신의 이야기를 문서화하는 방법을 배웁니다. 자서전을 통해 삶의 의미를 되새겨 보세요.

**생활로 타는 건강 자전거**: 자전거 타기의 기술부터 건강 관리까지, 자전거를 통해 노년의 건강을 지킬 수 있는 방법을 제공합니다.

**노년에 즐기는 클래식**: 클래식 음악의 세계로 안내하며, 음악 감상의 즐거움과 그로 인한 정신적, 감성적 이득을 설명합니다.

**프레지로 프레젠테이션**: 프레지를 활용하여 인상적인 프레젠테이션을 만드는 기술을 배웁니다. 이를 통해 노년에도 활발한 사회 활동이 가능함을 보여줍니다.

**노년도 탐구하는 QGIS**: 지리정보시스템(GIS)을 이용한 데이터 시각화 및 분석 기술을 배우고, 지리적 데이터를 통해 세상을 새롭게 이해할 수 있습니다.

**ThinkWise로 컨셉 훈련을 하는 마인드맵**: 마인드맵을 활용해 정보를 조직하고, 생각을 확장하는 방법을 배웁니다.

**돈이 되는 블로그 만들기**: 효과적인 블로그 운영 방법을 배우고, 블로그를 통해 경제적 수익을 창출하는 방법을 안내합니다.

**노년도 할 수 있는 웹프로그래밍**: 웹 개발 기초부터 시작하여, 자신만의 웹사이트를 만드는 법을 배웁니다.

**노년에 즐기는 대학생활**: 평생 교육의 기회를 탐색하고, 대학에서의 학습 경험이 노년에 어떤 의미가 있는지 탐구합니다.

**노년에 다시하는 수학 공부**: 기초 수학부터 고급 수학까지, 수학에 대한 이해를 깊이 있게 다짐으로써 정신을 활성화하는 방법을 배웁니다.

이 시리즈는 노년이라는 새로운 시작을 향한 여정에 있어서 길잡이 역할을 하며, 계속해서 배우고 성장할 수 있는 기회를 제공

합니다. 각 권은 특정 주제에 대한 심도 있는 안내와 실용적인 조언을 담고 있어, 노년에도 활동적이고 의미 있는 삶을 영위할 수 있게 도와줍니다. '노년도 할 수 있다'는 단순한 구호가 아니라, 여러분의 삶을 변화시킬 실질적인 행동으로 이어질 것입니다.</Text>
        </Document>
        <Document ID="B6EFD773-1231-4C78-9B5A-42B5ED9C9408">
            <Title>스크리브너 기존 파일 오픈 후에 변경된 파일</Title>
            <Text>#
변경된 파일(깃허브) 

</Text>
        </Document>
        <Document ID="BBB8225D-2872-4473-912C-76172C2D86DB">
            <Title>[필독]시험응시안내서</Title>
        </Document>
        <Document ID="BD9ACD01-9E34-4312-84FE-A9A47D977796">
            <Title>노년도 탐구하는 QGIS</Title>
        </Document>
        <Document ID="C59A17D9-1894-4BF7-AC4E-3D75B2F7F350">
            <Title>컨셉</Title>
            <Text>#</Text>
        </Document>
        <Document ID="CCB43881-745C-4FA9-90B8-6A8040073D91">
            <Title>하단에서 만들기</Title>
            <Text>#</Text>
        </Document>
        <Document ID="DAED05F4-AC58-4C62-AABB-997CFA0A9391">
            <Title>노년에 즐기는 클래식</Title>
        </Document>
        <Document ID="DD5CDF35-F0AB-4A7D-8E62-56370B382BF9">
            <Title>한국방송통신대학교</Title>
        </Document>
        <Document ID="DDB02950-268B-43F8-AC52-879B0A00364C">
            <Title>컨셉</Title>
        </Document>
        <Document ID="E0AA964E-7A7C-474E-A182-FC105F7A8ACD">
            <Title>구글 애드센스</Title>
            <Text>구글 애드센스

구글 애드센스: https://adsense.google.com

#</Text>
        </Document>
        <Document ID="EB16C257-0E37-4678-A547-63BDF44FDADA">
            <Title>NodeJS</Title>
            <Text>익스프레스 설치하기
익스프레스는 기본 라이브러리가 아니기 때문에 따로 설치해야 합니다.
디렉터리 만들기
mkdir express-server
#

#

설치된 상태를 확인합니다.

#

npm ls로 확인

#</Text>
        </Document>
        <Document ID="FA7DAE32-1D51-4626-965B-3B74A494AEE8">
            <Text>#
서울사이버대학교 시험 공지

#
아이피 공유 제한

#
예외 처리 및 추가시험

</Text>
        </Document>
    </Documents>
</SearchIndexes>
